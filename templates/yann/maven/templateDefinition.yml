resources:

  - name: {{ .Values.GitRepoMvn.name | default "src_code_backapp_mvn" }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.GitRepoMvn.gitProvider }}
      path: {{ .Values.GitRepoMvn.path }}
      branches:
        include: {{ .Values.GitRepoMvn.branches.include }}
      files:
        include: {{ .Values.GitRepoMvn.files.include }}
        exclude: {{ .Values.GitRepoMvn.files.exclude }}

  - name: {{ .Values.BuildInfoMvn.resourceName | default "bi_backapp_mvn" }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoMvn.name | default "BuildInfoMvn" }}
      buildNumber: ${run_number}

  - name: {{ .Values.BuildInfoMvnPromoted.resourceName | default "bi_backapp_mvn_promoted_staging" }} 
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoMvn.name | default "BuildInfoMvn" }}
      buildNumber: '${run_number}'

  - name: {{ .Values.PropertyBagMvn | default "pb_backapp_mvn" }}  
    type: PropertyBag
    configuration:
      appVersion: X.X.X

  - name: {{ .Values.GitRepoContainer.name | default "src_dockerfile_backapp_mvn" }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.GitRepoContainer.gitProvider }}
      path: {{ .Values.GitRepoContainer.path }}
      branches:
        include: {{ .Values.GitRepoContainer.branches.include }}
      files:
        include: {{ .Values.GitRepoContainer.files.include }}      

  - name: {{ .Values.BuildInfoContainer.resourceName | default "bi_backapp_mvn_docker" }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoContainer.name | default "backapp_mvn_docker" }}
      buildNumber: '${run_number}'

  - name: bi_backapp_mvn_docker_promoted_staging
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoContainer.name | default "backapp_mvn_docker" }}
      buildNumber: '${run_number}'

  - name: {{ .Values.FileSpecMvn.name | default "fs_backapp_mvn" }} 
    type: FileSpec
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      pattern: "{{ .Values.MvnPromoteRepo }}/**/multi-module-application-${runVarAppVersion}.jar"
      flat: {{ .Values.FileSpecMvn.flat | default true }}

  - name: {{ .Values.PropertyBagContainer | default "pb_backapp_mvn_docker" }}  
    type: PropertyBag
    configuration:   
      appVersion: X.X.X

pipelines:
  - name: {{ .Values.Pipeline.mvnNname }} 
    steps:
      - name: {{ .Values.MvnBuild.stepName }} 
        type: MvnBuild
        configuration: 
          mvnCommand:           {{ .Values.MvnBuild.goals }} 
          sourceLocation:       {{ .Values.MvnBuild.sourceLocation }} 
          configFileLocation:   {{ .Values.MvnBuild.configFileLocation }} 
          configFileName:       {{ .Values.MvnBuild.configFileName }} 
          forceXrayScan:        {{ .Values.MvnBuild.forceXrayScan }} 
          autoPublishBuildInfo: {{ .Values.MvnBuild.autoPublishBuildInfo }} 
          inputResources:
            - name: {{ .Values.GitRepoMvn.name }} 
          outputResources:
            - name: {{ .Values.BuildInfoMvn.resourceName }} 
          integrations:
            - name: {{ .Values.ArtifactoryIntegration }}
        execution:
          onStart:
              - echo {{ .Values.BuildInfoMvn.resourceName }}
              - echo ${res_{{ .Values.BuildInfoMvn.resourceName }}_resourcePath}"
#             - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_src_code_backapp_mvn_branchName}"
#             - cd ${res_src_code_backapp_mvn_resourcePath}/complete/CI/jfrog
#             - ls -l && chmod +x init_mvn.sh
#             - ./init_mvn.sh -u  ${int_artifactory_eu_url/%artifactory/} -p ${int_artifactory_eu_apikey} -e "${envVarEdgeUrl}"
#           onSuccess:
# #            - add_run_variables myAppVersion=`if [[ ${res_src_code_backapp_mvn_isGitTag} == "True" ]]; then echo ${res_src_code_backapp_mvn_gitTagName}; else echo ${myDemoVersion}; fi` 
#             - add_run_variables runVarAppVersion=`sed -n "s/[[:space:]]*<version>\(.*\)<\/version>/\1/p" ${res_src_code_backapp_mvn_resourcePath}/complete/pom.xml `
#             - add_run_variables runVarGitCommit=${res_src_code_backapp_mvn_commitSha}
#             - echo $runVarAppVersion
#             - echo $runVarGitCommit
#             - jfrog rt sp --build=${res_bi_backapp_mvn_buildName}/${run_number} --exclusions="*.pom;*library*" ${envVarMvnPromoteRepo}/ "src.commit.sha=${runVarGitCommit};app.version=${runVarAppVersion};app.name=ninja"
                
      - name: {{ .Values.XrayMvnStepName }}
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: {{ .Values.BuildInfoMvn.resourceName }}
              trigger: true
            
      # - name: promote_bi_backapp_mvn
      #   type: PromoteBuild
      #   configuration:
      #     targetRepository: ${envVarMvnPromoteRepo}
      #     includeDependencies: false
      #     status: SANDBOX_OK
      #     comment: Unit testing and Xray scan passed succesfully
      #     copy: false
      #     inputResources:
      #       - name: bi_backapp_mvn
      #         trigger: true
      #     inputSteps:
      #       - name: scan_backapp_mvn
      #     outputResources:
      #       - name: pb_backapp_mvn            
      #       - name: bi_backapp_mvn_promoted_staging
      #   execution:  
      #     onStart:
      #       - echo ${res_bi_backapp_mvn_buildName} 
      #       - echo ${res_bi_backapp_mvn_buildNumber} 
      #     onSuccess:
      #       - write_output pb_backapp_mvn appVersion=${runVarAppVersion}
      #       - write_output pb_backapp_mvn appCommitSHA=${runVarGitCommit}
      #       - write_output pb_backapp_mvn biNumber=${res_bi_backapp_mvn_buildNumber}