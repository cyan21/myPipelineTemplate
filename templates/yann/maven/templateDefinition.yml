resources:

  - name: {{ .Values.GitRepoMvn.name | default "src_code_backapp_mvn" }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.GitRepoMvn.gitProvider }}
      path: {{ .Values.GitRepoMvn.path }}
      branches:
        include: {{ .Values.GitRepoMvn.branches.include }}
      files:
        include: {{ .Values.GitRepoMvn.files.include }}
        exclude: {{ .Values.GitRepoMvn.files.exclude }}

  - name: {{ .Values.BuildInfoMvn.resourceName | default "bi_backapp_mvn" }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoMvn.name | default "BuildInfoMvn" }}
      buildNumber: ${run_number}

  - name: {{ .Values.BuildInfoMvnPromotion.resourceName | default "bi_backapp_mvn_promoted_staging" }} 
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoMvn.name | default "BuildInfoMvn" }}
      buildNumber: ${run_number}

  - name: {{ .Values.PropertyBagMvn | default "pb_backapp_mvn" }}  
    type: PropertyBag
    configuration:
      appVersion: X.X.X

  - name: {{ .Values.GitRepoContainer.name | default "src_dockerfile_backapp_mvn" }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.GitRepoContainer.gitProvider }}
      path: {{ .Values.GitRepoContainer.path }}
      branches:
        include: {{ .Values.GitRepoContainer.branches.include }}
      files:
        include: {{ .Values.GitRepoContainer.files.include }}      

  - name: {{ .Values.BuildInfoContainer.resourceName | default "bi_backapp_mvn_oci" }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoContainer.name | default "backapp_mvn_oci" }}
#      buildNumber: ${runVarBINumber}
      buildNumber: "${run_number}"

  - name: {{ .Values.BuildInfoContainerPromotion.resourceName | default "bi_backapp_mvn_oci_promoted_staging" }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      buildName: {{ .Values.BuildInfoContainer.name | default "backapp_mvn_oci" }}
#      buildNumber: ${runVarBINumber}
      buildNumber: "${run_number}"

  - name: {{ .Values.FileSpecMvn.name | default "fs_backapp_mvn" }} 
    type: FileSpec
    configuration:
      sourceArtifactory: {{ .Values.ArtifactoryIntegration }}
      pattern: "{{ .Values.MvnPromoteRepo }}/**/{{ .Values.FileSpecMvn.appName }}-${runVarAppVersion}.jar"
#      pattern: "{{ .Values.MvnPromoteRepo }}/**/{{ .Values.FileSpecMvn.appName }}-${res_{{ .Values.PropertyBagContainer }}_appVersion}.jar"
      flat: {{ .Values.FileSpecMvn.flat | default true }}

  - name: {{ .Values.PropertyBagContainer | default "pb_backapp_mvn_oci" }}  
    type: PropertyBag
    configuration:   
      appVersion: X.X.X

###### DISTRIBUTION

  - name: bi_mvn_debian
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory_eu
      buildName: webapp-debian
      buildNumber: 1

  - name: rb_mvn_debian
    type: ReleaseBundle
    configuration:
      sourceDistribution: distribution_eu
      name: java-webapp
      version: "1"          # will be overriden by the CreateReleaseBundle step 
      isSigned: true

  - name: aql_distrib_debian
    type: Aql
    configuration:
      sourceArtifactory: artifactory_eu
      query: > 
        items.find({
        "$and": [
        {"@app.version": "${runVarAppVersion}"},
        {"@app.name": "ninja"}
        ]})
      addedProperties:
        distribution: "automatic"
      mappings:
        - name: java
          input: "ninja-rc-mvn-local/(.*)"
          output: "ninja-mvn-release-local/$1"
        - name: debian
          input: "ninja-release-debian-local/pool/(.*)"
          output: "ninja-debian-release-local/pool/$1"

  - name: dr_mvn_debian 
    type: DistributionRule
    configuration:
      sourceDistribution: distribution_eu
      serviceName: "*"         
      siteName: "*"
      cityName: "New York City"
      countryCodes:
        - "US"

pipelines:
  - name: {{ .Values.Pipeline.mvnNname }} 
    steps:
      - name: {{ .Values.MvnBuild.stepName }} 
        type: MvnBuild
        configuration: 
          mvnCommand:           {{ .Values.MvnBuild.goals }} 
          sourceLocation:       {{ .Values.MvnBuild.sourceLocation }} 
          configFileLocation:   {{ .Values.MvnBuild.configFileLocation }} 
          configFileName:       {{ .Values.MvnBuild.configFileName }} 
          forceXrayScan:        {{ .Values.MvnBuild.forceXrayScan }} 
          autoPublishBuildInfo: {{ .Values.MvnBuild.autoPublishBuildInfo }} 
          inputResources:
            - name: {{ .Values.GitRepoMvn.name }} 
          outputResources:
            - name: {{ .Values.BuildInfoMvn.resourceName }}
          integrations:
            - name: {{ .Values.ArtifactoryIntegration }}
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_{{ .Values.ArtifactoryIntegration }}_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_{{ .Values.GitRepoMvn.name }}_branchName}"
            - cd ${res_{{ .Values.GitRepoMvn.name }}_resourcePath}/complete/CI/jfrog
            - ls -l && chmod +x init_mvn.sh
            - ./init_mvn.sh -u  ${int_{{ .Values.ArtifactoryIntegration }}_url/%artifactory/} -p ${int_{{ .Values.ArtifactoryIntegration }}_apikey} -e "{{ .Values.EdgeUrl }}" -i {{ .Values.ArtifactoryIntegration }} -v {{ .Values.MvnRepo }}
          onSuccess:
            - add_run_variables runVarAppVersion=`sed -n "s/[[:space:]]*<version>\(.*\)<\/version>/\1/p" ${res_{{ .Values.GitRepoMvn.name }}_resourcePath}/complete/pom.xml `
            - add_run_variables runVarGitCommit=${res_{{ .Values.GitRepoMvn.name }}_commitSha}
            - echo $runVarAppVersion
            - echo $runVarGitCommit
            - jfrog rt sp --build=${res_{{ .Values.BuildInfoMvn.resourceName }}_buildName}/${run_number} --exclusions="*.pom;*library*" {{ .Values.MvnRepo }}/ "src.commit.sha=${runVarGitCommit};app.version=${runVarAppVersion};app.name=ninja"
                
      - name: {{ .Values.XrayMvnStepName }}
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: {{ .Values.BuildInfoMvn.resourceName }}
              trigger: true
            
      - name: {{ .Values.BuildInfoMvnPromotion.resourceName }}
        type: PromoteBuild
        configuration:
          targetRepository: {{ .Values.BuildInfoMvnPromotion.mvnPromoteRepo }} 
          includeDependencies: {{ .Values.BuildInfoMvnPromotion.includeDependencies }}
          status: {{ .Values.BuildInfoMvnPromotion.status }}
          comment: {{ .Values.BuildInfoMvnPromotion.comment }}
          copy: {{ .Values.BuildInfoMvnPromotion.copy }}
          inputResources:
            - name: {{ .Values.BuildInfoMvn.resourceName }}
              trigger: true
          inputSteps:
            - name: {{ .Values.XrayMvnStepName }}
          outputResources:
            - name: {{ .Values.PropertyBagMvn }}            
            - name: {{ .Values.BuildInfoMvnPromotion.resourceName }}
        execution:  
          onStart:
            - echo ${res_{{ .Values.BuildInfoMvn.resourceName }}_buildName} 
            - echo ${res_{{ .Values.BuildInfoMvn.resourceName }}_buildNumber} 
          onSuccess:
            - write_output {{ .Values.PropertyBagMvn }} appVersion=${runVarAppVersion}
            - write_output {{ .Values.PropertyBagMvn }} appCommitSHA=${runVarGitCommit}
            - write_output {{ .Values.PropertyBagMvn }} biNumber=${res_{{ .Values.BuildInfoMvn.resourceName }}_buildNumber}

  - name: {{ .Values.Pipeline.mvnContainerName }} 
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: together
          runtime:
            type: host
          inputResources:
            - name: {{ .Values.PropertyBagMvn }}
        execution:
          onExecute:
          {{- if not .Values.OCIPipeline }}
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"{{ .Values.DockerBuild.registry }}\"]}" > /etc/docker/daemon.json
            - sudo cat /etc/docker/daemon.json
            - sudo systemctl restart docker
          {{- end }}
            - add_run_variables runVarAppVersion=${res_{{ .Values.PropertyBagMvn }}_appVersion}
            - add_run_variables runVarAppCommitSHA=${res_{{ .Values.PropertyBagMvn }}_appCommitSHA}
            - add_run_variables runVarBINumber=${res_{{ .Values.PropertyBagMvn }}_biNumber}
     
    {{- if .Values.OCIPipeline }}
      - name: {{ .Values.OCIBuild.stepName | default "build_backapp_mvn_oci" }} 
        type: oci/PodmanBuild
        configuration:
          affinityGroup: together
          environmentVariables:
            JFROG_CLI_LOG_LEVEL: DEBUG
          runtime:
            type: host
          dockerFileName: {{ .Values.OCIBuild.dockerFileName }}
          dockerFileLocation: {{ .Values.OCIBuild.dockerFileLocation }}
          ociImageName: "{{ .Values.OCIBuild.registry }}/{{ .Values.OCIBuild.imageName }}"
          ociImageTag: ${runVarAppVersion}
          pushImage: {{ .Values.OCIBuild.pushImage }}
          artifactoryTargetRepoName: {{ .Values.OCIBuild.artifactoryTargetRepoName }}
          buildName: "${res_{{ .Values.BuildInfoContainer.resourceName }}_buildName}"
          buildNumber: "${run_number}"
#        buildNumber: ${runVarBINumber}
          #         buildNumber: ${res_{{ .Values.BuildInfoContainer.resourceName }}_buildNumber} 
          buildDependency: ${res_{{ .Values.BuildInfoContainer.resourceName }}_pattern}
          inputResources:
            - name: {{ .Values.GitRepoContainer.name }} 
            - name: {{ .Values.FileSpecMvn.name }}
          outputResources:
            - name: {{ .Values.BuildInfoContainer.resourceName }}
            - name: {{ .Values.PropertyBagContainer }}
          inputSteps:
            - name: setup_env
          integrations:
            - name: {{ .Values.ArtifactoryIntegration }}
        execution:
          onStart:
            # - add_run_variables runVarAppVersion=${res_{{ .Values.PropertyBagMvn }}_appVersion}
            # - add_run_variables runVarAppCommitSHA=${res_{{ .Values.PropertyBagMvn }}_appCommitSHA}    
            - ls -la ${res_{{ .Values.FileSpecMvn.name }}_resourcePath}
            - echo ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}
            - ls -la  ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}
            - cp ${res_{{ .Values.FileSpecMvn.name }}_resourcePath}/multi-module-application-${runVarAppVersion}.jar ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}/complete/CI/Docker/multi-module-application.jar
            - ls -la ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}/complete/CI/Docker/
            - add_run_variables runVarGitCommit=${res_{{ .Values.GitRepoContainer.name }}_commitSha}  
          onSuccess:
            - echo "{{ .Values.OCIBuild.artifactoryTargetRepoName }}/backapp-mvn/${runVarAppVersion}/manifest.json"
            - jfrog rt sp --build=${res_{{ .Values.BuildInfoContainer.resourceName }}_buildName}/${run_number} {{ .Values.OCIBuild.artifactoryTargetRepoName }}/backapp-mvn/${runVarAppVersion}/manifest.json "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit}"

    {{- else }}
      - name: {{ .Values.DockerBuild.stepName | default "build_backapp_mvn_docker" }} 
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: {{ .Values.DockerBuild.dockerFileName }}
          dockerFileLocation: {{ .Values.DockerBuild.dockerFileLocation }}
          dockerImageName: "{{ .Values.DockerBuild.registry }}/{{ .Values.DockerBuild.imageName }}"
          dockerImageTag: ${runVarAppVersion}
          dockerOptions: --build-arg JFROG_CLI_BUILD_URL=${int_{{ .Values.ArtifactoryIntegration }}_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_{{ .Values.GitRepoContainer.name }}_branchName
          inputSteps:
            - name: setup_env
          inputResources:
            - name: {{ .Values.GitRepoContainer.name }}
            - name: {{ .Values.FileSpecMvn.name }}
          integrations:
            - name: {{ .Values.ArtifactoryIntegration }}
        execution:
          onStart:
            - ls -la ${res_{{ .Values.FileSpecMvn.name }}_resourcePath}
            - echo ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}
            - ls -la  ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}
            - cp ${res_{{ .Values.FileSpecMvn.name }}_resourcePath}/multi-module-application-${runVarAppVersion}.jar ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}/complete/CI/Docker/multi-module-application.jar
            - ls -la ${res_{{ .Values.GitRepoContainer.name }}_resourcePath}/complete/CI/Docker/
            - add_run_variables runVarGitCommit=${res_{{ .Values.GitRepoContainer.name }}_commitSha}
      - name: {{ .Values.DockerPush.stepName | default "publish_backapp_mvn_docker" }} 
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: {{ .Values.DockerBuild.artifactoryTargetRepoName }}
          autoPublishBuildInfo: true
          inputSteps:
            - name: {{ .Values.DockerBuild.stepName }}
          integrations:
            - name: {{ .Values.ArtifactoryIntegration }}
          outputResources:
            - name: {{ .Values.BuildInfoContainer.resourceName }}
        execution:
          onSuccess:
            - echo "{{ .Values.DockerPush.stepName }}/backapp-mvn/${runVarAppVersion}/manifest.json"
            - jfrog rt sp --build=${res_{{ .Values.BuildInfoContainer.resourceName }}_buildName}/${run_number} {{ .Values.DockerPush.stepName }}/backapp-mvn/${runVarAppVersion}/manifest.json "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit}"

      - name: {{ .Values.XrayMvnContainerStepName }}
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: {{ .Values.BuildInfoContainer.resourceName }}
              trigger: true

    {{- end }}

      - name: {{ .Values.BuildInfoContainerPromotion.resourceName }}
        type: PromoteBuild
        configuration:
          targetRepository: {{ .Values.BuildInfoContainerPromotion.mvnPromoteRepo }} 
          includeDependencies: {{ .Values.BuildInfoContainerPromotion.includeDependencies }}
          status: {{ .Values.BuildInfoContainerPromotion.status }}
          comment: {{ .Values.BuildInfoContainerPromotion.comment }}
          copy: {{ .Values.BuildInfoContainerPromotion.copy }}
          inputSteps:
            - name: {{ .Values.XrayMvnContainerStepName }}
          inputResources:
            - name: {{ .Values.BuildInfoContainer.resourceName }}
          outputResources:
            - name: {{ .Values.PropertyBagContainer }}
            - name: {{ .Values.BuildInfoContainerPromotion.resourceName }}
        execution:  
          onSuccess:
            - write_output {{ .Values.PropertyBagContainer }} newTag=${runVarAppVersion}
            - write_output {{ .Values.PropertyBagContainer }} mvnBINumber=${runVarBINumber}

  - name: distrib_mvn
    steps:
      - name: package_app
        type: packaging/PackageDebian
        configuration:
          binaryLocation: "**/multi-module-application*.jar"
          buildName: backapp_mvn
          buildNumber: ${res_{{ .Values.PropertyBagContainer }}_mvnBINumber}
          appExtension: "jar"
          debianPkgName: "ninja"
          debianBuildName: "webapp-debian"
          targetDebianRepo: "ninja-release-debian"
          propsToSet: "app.version=${res_{{ .Values.PropertyBagContainer }}_newTag};app.name=ninja"
          integrations:
            - name: {{ .Values.ArtifactoryIntegration }}
          inputResources: 
            - name: {{ .Values.PropertyBagContainer }}
          outputResources:
            - name: aql_distrib_debian
        execution:
          onStart: 
            - add_run_variables runVarAppVersion=${res_{{ .Values.PropertyBagContainer }}_newTag}
            - echo ${runVarAppVersion}

      - name: init_rb_debian_mvn
        type: CreateReleaseBundle 
        configuration:
          releaseBundleName: java-webapp 
          releaseBundleVersion: ${runVarAppVersion} 
          dryRun: false
          sign: true 
          description: automatic creation 
          releaseNotes:
            syntax: markdown
            content: |
              # Description 
              super release 
              * Feature 1 
              * Bigfix 1
          inputResources:
            - name: aql_distrib_debian
          outputResources:
            - name: rb_mvn_debian 

      - name: distribute_mvn_debian
        type: DistributeReleaseBundle
        configuration:
          dryRun: false 
          inputResources:
            - name: rb_mvn_debian 
              trigger: true   
            - name: dr_mvn_debian 
              trigger: true  
