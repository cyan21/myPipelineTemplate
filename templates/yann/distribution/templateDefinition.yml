resources:

  - name: {{ .Values.DemoAppDistributionResources.scm.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.DemoApp.scmIntegration }}
      path: {{ .Values.DemoAppDistributionResources.scm.path }}
      branches:
        include: {{ .Values.DemoAppDistributionResources.branches.include }}
      files:
        include: {{ .Values.DemoAppDistributionResources.files.include }}
      buildOn:
         commit: {{ .Values.DemoAppDistributionResources.buildOn.commit }}

  - name: {{ .Values.DemoAppDistributionResources.webhook.name }}
    type: IncomingWebhook
    configuration:
      webhookName:  {{ .Values.DemoApp.webhookIntegration }}

  - name: {{ .Values.DemoAppDistributionResources.buildInfo.resourceName }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.DemoApp.artifactoryIntegration }}
      buildName: $runVarDockerBuildName
      buildNumber: runVarDockerBuildNumber

  - name: {{ .Values.DemoAppDistributionResources.releaseBundle.resourceName }}
    type: ReleaseBundle
    configuration:
      sourceDistribution: {{ .Values.DemoApp.distributionIntegration }}
      name: {{ .Values.DemoAppDistributionResources.releaseBundle.name }}
      version: "1"          # will be overriden by the CreateReleaseBundle step 
      isSigned: true

  - name: {{ .Values.DemoAppDistributionResources.aql.name }}
    type: Aql
    configuration:
      sourceArtifactory: {{ .Values.DemoApp.artifactoryIntegration }}
      query: > 
        items.find({
          "@app.version": "${runVarAppVersion}",
          "@app.name": "${runVarAppName}"
        })
      addedProperties:
        distribution: "automatic"
      mappings:
      {{- range .Values.DemoAppDistributionResources.aql.mapping }}
        - name: {{ .name }}
          input: {{ .input }}
          output: {{ .output }}
        # - name: python
        #   input: "urs-generic-release-local/(.*)"
        #   output: "release-generic-local/$1"
        # - name: debian
        #   input: "ninja-debian-release-local/pool/(.*)"
        #   output: "ninja-debian-release-local/pool/$1"
        # - name: docker
        #   input: "urs-docker-release-local/(.*)"
        #   output: "release-docker-local/$1"
      {{- end }} 

  - name: {{ .Values.DemoAppDistributionResources.distributionRule.name }} 
    type: DistributionRule
    configuration:
      sourceDistribution: {{ .Values.DemoApp.distributionIntegration }}
      serviceName: "*"         
      siteName: "*"
      cityName: "*"
      countryCodes:
      {{- range .Values.DemoAppDistributionResources.distributionRule.countryCodes }}
        - "{{ . }}"
      {{- end }} 

pipelines:
  - name: {{ .Values.DemoApp.pipelineName }}
    steps:
      - name: {{ .Values.DemoAppDistributionSteps.export.name }}
        type: Bash
        configuration:
          inputResources:
            - name: {{ .Values.DemoAppDistributionResources.scm.name }}
            - name: {{ .Values.DemoAppDistributionResources.webhook.name }}
          outputResources:
            - name: {{ .Values.DemoAppDistributionResources.aql.name }}
        execution:
          onExecute:
            - echo "$res_{{ .Values.DemoAppDistributionResources.webhook.name }}_payload" > payload.json
            - add_run_variables runVarAppName=`read_json payload.json "appName"`
            - add_run_variables runVarAppVersion=`read_json payload.json  "appVersion"`
            - add_run_variables runVarDockerBuildName=`read_json payload.json  "DockerBuildName"`
            - add_run_variables runVarDockerBuildNumber=`read_json payload.json "buildNumber"`
            - echo $runVarAppName $runVarAppVersion $runVarDockerBuildName $runVarDockerBuildNumber

      - name: {{ .Values.DemoAppDistributionSteps.createRB.name }}
        type: CreateReleaseBundle 
        configuration:
          releaseBundleName: {{ .Values.DemoAppDistributionResources.releaseBundle.name }} 
          releaseBundleVersion: ${runVarAppVersion} 
          sign: true
          dryRun: {{ .Values.DemoAppDistributionResources.releaseBundle.dryRun.create }}
          description: automatic creation 
          releaseNotes:
            syntax: markdown
            content: |
              # Description 
              super release 
              * Feature 1 
              * Bigfix 1
          inputResources:
            - name: {{ .Values.DemoAppDistributionResources.aql.name }}
            # - name: {{ .Values.DemoAppDistributionResources.buildInfo.resourceName }}
          outputResources:
            - name: {{ .Values.DemoAppDistributionResources.releaseBundle.resourceName }} 

      - name: {{ .Values.DemoAppDistributionSteps.distributeRB.name }}
        type: DistributeReleaseBundle
        configuration:
          dryRun: {{ .Values.DemoAppDistributionResources.releaseBundle.dryRun.distribute }} 
          inputResources:
            - name: {{ .Values.DemoAppDistributionResources.distributionRule.name }}
              trigger: true   
            - name: {{ .Values.DemoAppDistributionResources.releaseBundle.resourceName }}  
              trigger: true